<!-- livebook:{"file_entries":[{"name":"modifying_a_list.png","type":"attachment"},{"name":"new_element_to_the_top.png","type":"attachment"},{"name":"rebinding_a_tuple.png","type":"attachment"},{"name":"shallow_copy.png","type":"attachment"}]} -->

# Chapter 2. Building blocks

## Working with variables

Elixir is a dynamic programming language. The variable type is determined by whatever data it contains at the moment.

In Elixir terms, assignment s called *binding*. The varible is bound to the value.

```elixir
population = 800000
```

The prevalent naming convention is to use only lowecase letters, digits, and underscores

```elixir
valid_variable_name = 5
valid_2 = 10
```

**Data in Elixir is immutable**: its contents can't be changed. But variables can be rebound to a different value.

Rebinding doesn't mutate the existing memory location. It reserves new memory and reassigns the symbolic name to the new location.

```elixir
population = 2000000
pupulation = 300000
```

Elixir is a garbage-collectable language, which means you don't have to manually release memory. When a variable goes out of scope, the corresponding memory is elegible for garbage collection and will be released sometime in the future.

## Organizing your code

Elixir is a functional language. Due to the immutable nature of the data, a typical Elixir program consists of many small functionsl.

### Modules

A *module* is a collection of functions.
Every function must be defined inside a module.

The standard library provides many useful modules. For example, the `IO` has the `puts` function, which can be used to print a message.

```elixir
IO.puts("Hello")
```

The `defmodule` construct is used to define modules.

The `def` construct is used to define functions.

Modules names:

* Starts with uppercase letter
* Are usually written in *CamelCase*
* Can consist of alphanumerics, underscores, and the dot (`.`) character.

```elixir
defmodule Ops do
  def add_two_nums(a, b) do
    a + b
  end
end

Ops.add_two_nums(7, 2)
```

A module must be defined in a single file. A single file may contain multiple modules.

```elixir
defmodule Module1 do
  # code
end
defmodule Module2 do
  # code
end
```

The latter is often used to organize modules hierachically.

Both the dot character and the nesting are conveniences. Once the code is compiled, there are no special hierarchical relations between modules. The dot can help you scope your names.

```elixir
# Both approaches are equivalent

#1
defmodule Geometry.Rectangle do
  
end
defmodule Geometry.Circle do
  
end

#2
defmodule Geometry do
  defmodule Square do
    
  end
  defmodule Triangle do
    
  end
end
```

### Functions

A function must always be a part of a module. They follow the same naming conventions as variables.

As a convention, functions names can end with `?` and `!`. `?` is used to indicate a function that retuns either *true* or *false*. `!` indicates that it may raise a runtime error.

If a function has no arguments, you can omit the parentheses.

Also there is no explicit return in Elixir. Everything that has a return value is an expression. Ther return value of a function is the return value of its last expression.

```elixir
defmodule Hi do
  def hi do
    "hi"
  end
end

# Parentheses are optional
Hi.hi
```

If a definition is short, you can use a condensed form.

```elixir
defmodule No do
  def say_no, do: "no"

  def add(a, b), do: a + b
end

IO.puts(No.say_no)
IO.puts(No.add(3, 2))
```

Given that elixir is a functional language, you often need to combien functions, passing the result as an argument to the next one.

The pipeline operator operator places the result of the previous call as the first argument of the next call.

```elixir
defmodule SM do
  def increment(x), do: x + 1
  def decrement(x), do: x - 1
end

# Using the pipeline operator
5
|> SM.increment
|> SM.increment
|> SM.decrement
|> SM.increment
|> IO.puts

# It is transformed at compile time into the following
IO.puts(SM.increment(SM.decrement(SM.increment(SM.increment(5)))))
```

### Function arity

Arity is the number of arguments a function reveives.

A function is uniquely identified by its containing module, its name, and its arity.

The following function is called `Reactangle.area/2`

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Rectangle do
  def area(a, b) do
  end
end
```

Two functions with the same name but different arities are two different functions. In the following example, the name might be overloaded, but the arities differ, so we talk about them as two distinct functions, each having its own implementation.

```elixir
defmodule Rect do
  def area(a), do: area(a, a)
  def area(a, b), do: a * b
end
```

It usually makes no sense for different functions with a same name to have completily different implementations. More commonly, a lower-arity function delegates to a higher-arity function. This pattern is so frequent that Elixir allows you to specify defaults for arguments. Always keep in mind that default values generate multiple functions of the same name with different arities.

```elixir
defmodule Calculator do
  def sum(a, b, c \\ 0, d \\ 0), do: a + b + c + d
end
# This generates:
# Calculator.sum/2
# Calculator.sum/3
# Calculator.sum/4

IO.puts Calculator.sum(5, 6)
IO.puts Calculator.sum(5, 6, 7)
IO.puts Calculator.sum(5, 6, 7, 8)
```

Always keep in mind that default values generate multiple functions of the same name with different arities. Because arity distinguishes multiple functions of the same name, it's no possible to have a function accept a variable number of arguments.

<!-- livebook:{"break_markdown":true} -->

### Function visibility

The `def` macro makes the function public. In Elixir terminology, it's said that the function is exported.

You can use the `defp` macro to make the function private. A private function can be used only inside the module it's defined in.

```elixir
defmodule TestPrivate do
  def double(a), do: sum(a, a) # Calls the private function
  defp sum(a, b), do: a + b # Private function
end
    
TestPrivate.double(7)
```

### Imports and aliases

Calling functions from another module can sometimes be cumbersome, because you need to reference the module name. Importing a module allows you to call its public functions without prefixing them with the module name.

An alternative to `import` is `alias`, a construct that makes it possible to reference a module under a different name. Although they increase ambiguity, in some cases they can be useful to improve readability, especially if you call functions from a long-named module many times.

```elixir
defmodule MyModule do
  import IO

  def my_fun do
    puts "calling my function"
  end
end

defmodule MyOtherModule do
  alias IO, as: SAY

  def my_fun do
    SAY.puts "calling other module's function"
  end
end

MyModule.my_fun()
MyOtherModule.my_fun()
```

The standard library's `Kernel` module is automatically imported into every modue. This is because `Kernel` contains functions that are often used.

<!-- livebook:{"break_markdown":true} -->

### Module attributes

The purpose of module attributes is twofild:

1. They can be used as compile-tiem constants.
2. You can register any attribute, which canbe then queried in runtime.

```elixir
defmodule Circle do
  @pi 3.1416

  def area(r), do: r*r*@pi
end

# The important thing about the @pi constant is that it exists only during
# the compilation of the module, when the references to it are inlined.

Circle.area(10)
```

Moreover, an attribute can be registered, which means it will be stored in the generated binary and can be accessed in runtiem. Elixir registers some module attributes y default, such as `@moduledoc` and `@doc`.

```elixir
defmodule Circle2 do
  @moduledoc "Implements basic circle functions"

  @doc "Computes the circumference of a circle"
  def circumference(r), do: 2*r*3.1416
end
```

To try this:

1. Generate a compiled file `elixirc circle.ex`
2. Start `iex` shell
3. Retrieve the attribute at runtime `Code.get_docs(Circle, :moduledoc)`

More interesting is that other tools from the Elixir ecosystem know how to work with theses attributes.

* You can use the help feature of `iex` to ee module's documentation: `h Circle`.
* You can use `ex_dox` to generate HTML documentation for your project.

<!-- livebook:{"break_markdown":true} -->

#### Type specifications

Typespecs allows you to provide type information for your functions, which can later be analized with a static tool called `dialyzer`. Provides a way of compensating for the lack of static type system.

```elixir
defmodule Ops2 do
  @spec add(number, number) :: number
  def add(a, b), do: a + b
end
```

## Understanding the type system

Elixir uses the Erlang type system. Consequently integration with Erlang libraries is usually simple.

### Numbers

Numbers can be integers or floats. There is no upper limit on the integer size, and you can use arbitrarily large numbers.

```elixir
IO.puts 1 + 54 - 50
IO.puts 8 / 3
IO.puts 8 / 2 # The division operator always returns a float value
IO.puts div(8, 3) # Integer division
IO.puts rem(8, 2) # Remainder

9999999999999999999999999999999999999999999999999999999999999999
```

### Atoms

Atoms are literal named constants. It consists of two parts:

1. **Text**: Is whatever you put after the colon character. At runtime, this text is kept in the *atom table*.
2. **Value**: Is the data that goes into the variable, and it's merely a reference to the atom table.

An *Alias* is an alternative syntax for atoms. When you use an alias, the compiler implicitly adds the Elixir. prefix to its text and inserts an atom there.

```elixir
:an_atom
:"an atom with spaces"

# The variable contains only a reference to the atom table.
# Memory consumtion is low, the comparisons are fast, and the code
# is still readable.
variable = :some_atom

# You can omit the beginning colon, and start with uppercase
# This is called an alias and is transformed into :"Elixir.AliasName"
IO.puts(AnAtom == :"Elixir.AnAtom")
```

It's no accident that the term *alias* is used for both give alternate names to modules and atoms. When you write `alias IO, as: MyIO`, you instruct the compiler to transform`MyIO` inot `IO`. Resolving this further, the final result emitted in the generated binary is `:Elixir.IO`.

#### Atoms as booleans

Elixir doesn't have a dedicated boolean type. Instead, the atoms `:true` and `:false` are used. As a syntatic sugar, Elixir allows you to reference these atoms without the starting colon character.

The term *boolean* is still used in Elixir to denote an atom that has a value of either `:true` or `:false`. The standard logical operators work with boolean atoms.

```elixir
IO.puts true == :true
IO.puts false == :false

IO.puts true and false
IO.puts true or false
IO.puts not true
```

#### Nil and truthy values

`:nil` works somewhat similarly to `null` from other languages. You can reference `nil` without a colon.

The atoms `nil` and `false` are treated as *falsy* values, whereas everything else is treated as a `truthy` value. This property can be used with Elixir's *short-circuit* operators `||`, `&&`, and `!`.

```elixir
IO.puts :nil == nil

# || returns the first expression that isn't falsy
IO.puts nil || false || 5 || true

# && returns the second expression, but only if the first one is truthy,
# Otherwise it returns the first expression withouth evaluating the second one
IO.puts true && 5
IO.puts false && 5
```

Short-circuiting can be used for elegant operation chaining.

<!-- livebook:{"force_markdown":true} -->

```elixir
read_cached || read_from_disk || read_from_database
```

You can use `&&` to ensure that certain conditions are met.

<!-- livebook:{"force_markdown":true} -->

```elixir
database_value = connection_established? && read_data
```

<!-- livebook:{"break_markdown":true} -->

### Tuples

Tuples are something like untypd structures or records, and they're most often used to group a *fixed number* of elements together.

* To extract an element from the tuple, you can use the `Kernel.elem/2` function.
* To modify an element you can use the `Kernel.put_elem/3` function. It doesn't modify the tuple. It returns the new version. Recall that data in Elixir is immutable.

Tuples are most appropiate to group a small, fixed number of elements together.

```elixir
person ={"Bob", 24}

IO.puts elem(person, 0)

person
|> put_elem(1, 33)
|> elem(1)
|> IO.puts

```

### Lists

Lists in Erlang are used to manage dynamic, *variable-sized* collections of data.

Lists work like singly linked lists. To do something with the list, you have to traverse it. Therefore, most of the operations on lists have an O(n) complexity.

```elixir
prime_numbers = [1, 2, 3, 5, 7]

# Iterates through the entire list to calculate its length
IO.puts length(prime_numbers)

# Iterates from the beginning to the desired element
IO.puts Enum.at(prime_numbers, 3)

# Check wheter a list contain a particular element
IO.puts 6 in prime_numbers

# Manipulate lists
prime_numbers = List.replace_at(prime_numbers, 0, 11)
IO.puts Enum.at(prime_numbers, 0)

# Insert at the specified position
prime_numbers = List.insert_at(prime_numbers, 4, 1)
IO.puts Enum.at(prime_numbers, 4)

# Concatenate two lists
nl = [3, 5, 9] ++ [0, 0, 0]
IO.puts Enum.at(nl, 3)

# Get the head of the list. This is O(1)
IO.puts hd(nl)

# Get the tail. This is O(1)
IO.puts Enum.at(tl(nl), 0)

# Push a new element to the top of the list. O(1)
nl = [8 | nl]
IO.puts hd(nl)

```

In Elixir, there is a special syntax to support recursive list definition:

`a_list = [head | tail]`

`head` can be any tpe of data, whereas `tail` is itself a list. If `tail` is an empty list, it indicates the end of the list.

```elixir
[1 | [4 | [8, 4, 6]]]
```

### Immutability

Elixir data can't be mutated. Every function returns the new, modified version of the input data. The modification of the input will result in some data copying, but generally, most of the memory will be shared between the old and the new version.

#### Modifying tuples

The modified tuple is always a complete, shallow copy of the old version.

Consider the following code:

<!-- livebook:{"force_markdown":true} -->

```elixir
a_tuple = {a, b, c}
new_tuple = put_elem(a_tuple, 1, b2)
```

The variable `new_tuple` will only contain a shallow copy, differing only in the second element. Both tuples reference variables `a` and `c`, and whatever is in those variables is shared (and not duplicated).

<!-- livebook:{"break_markdown":true} -->

![](files/shallow_copy.png)

<!-- livebook:{"break_markdown":true} -->

If you rebind the variable. After rebinding, `a_tuple` references another memory location. The old location of `a_tuple` isn't accessible and is available for garbage collection. The same holds for the variable `b`.

<!-- livebook:{"break_markdown":true} -->

![](files/rebinding_a_tuple.png)

<!-- livebook:{"break_markdown":true} -->

#### Modifying lists

When you modify the nth element of a list, the new version will contain shallow copies of the first *n - 1* elements, followed by the modified element. After that, the tails are completely shared.

<!-- livebook:{"break_markdown":true} -->

![](files/modifying_a_list.png)

<!-- livebook:{"break_markdown":true} -->

This is precisely why adding elements to the end of a list is expensive. To append a new element at the tail, you have to iterate and shallow copy the entire list.

In contrast, pushing an element to the top of a list doesn't copy anything, which makes it the least expensive operation. In this case, the new list's tail is the previous list.

<!-- livebook:{"break_markdown":true} -->

![](files/new_element_to_the_top.png)

<!-- livebook:{"break_markdown":true} -->

#### Benefits

There are two important benefits of immutability:

1. **Side-effect-free functions**. You can treat most functions as side-effect-free transformations. They take an input and return a result. Side-effect-free functions are easier to analyze, understand, and test. They have well-defined inputs and outputs. When you call a function, you can be sure that no variable will be implicitly changed. Whatever the function does, you must take its result and do something with it.

   > Elixir isn't a pure functional language, so functions may still have side effects. A function my write something to a file and issue a database or network call, which causes it to produce a side effect. But you can be certain that a function won't modify the value of any variable.

2. **Data consistency**. The implicit consequence of immutable data is the ability to hold all versions of a data structure in the program. When we pass some data through a series of transformations, if something goes wrong, the function can return the original data, which will roll back all of the transformations performed.  This is possible because none of the transformations modifies the memory occupied by the original data.

<!-- livebook:{"break_markdown":true} -->

### Maps

A *map* is a key-value store, where keys and values can be any term. It doesen't perform well with larg number of elements, and for this you should currently use `HashDict`. Maps are appropiate whenyou want to combien a couple of fields into a single structure. This use case somewhat overlaps that of tuples, but it provides the advantage of allowing you to access fields by name.

```elixir
bob = %{:name => "Bob", :age => 22}

# The keys are atoms, so you can write it slightly shorter
jon = %{name: "Jon", age: 33}

# Access operator
IO.puts jon[:name]
# Special access syntax. With this you get an error if you try to fetch
# some nonexistent field
IO.puts jon.age

# To change one or more field values that already exist in the map
new_bob = %{bob | name: "Bob Williams", age: 44}

# Insert a new key-value pair
new_bob = Map.put(new_bob, :passion, "Composition")

```

### Binaries and bitstrings

A *binary* is a chunck of bytes. They're consecutive sequences of bytes. Binaries play an important role in support for strings.

If you provide a byte value bigger than 255, it's truncated to the byte size.

```elixir
# Each number represents a value of the corresponding byte
<<1, 2, 3>>

# Truncated to <<4>>
<<260>>

# Specify the size of each value. Tell how many bits to use.
<<260::16>>

# Concatenate two binaries or bitstrings
<<1, 2>> <> <<4, 5>>
```
